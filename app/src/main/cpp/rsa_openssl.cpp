#include <stdlib.h>
#include <string.h>
#include <evp.h>
#include <bio.h>
#include <buffer.h>
#include <rsa.h>
#include <pem.h>
#include <err.h>
#include "rsa_openssl.h"
#include "Log.h"
#include "myprik.h"


extern void myencode(const unsigned char *prik, int key_len, char *base64, int len);
 /**打乱字符串函数
 * */
static void myswap(char *buf, int i, int j){
    char t;
    if(buf[i] == '\n' || buf[j] == '\n'){
        return;
    }
    t = buf[i];
    buf[i] = buf[j];
    buf[j] = t;
}


/* * 签名函数
 *
 * */
char *rsa_sign(RSA *rsa, const char *text, char *sig, unsigned int *len)
{

	if(text == NULL/* && sk_filename != NULL*/){
        LOGI("rsa_sign() text == NULL\n");
                return NULL;
        }

	unsigned char sha1[20] = { '\0' };
	SHA1((const unsigned char *)text, strlen(text), sha1);
	if (1 != RSA_sign(NID_sha1, sha1, 20, (unsigned char *) sig, len, rsa)) {
		RSA_free(rsa);
        LOGI("RSA_sign error.\n");
		return NULL;
	}

	RSA_free(rsa);

	return sig;
}



const char*  RSA_OPENSSL::rsaSign(std::string testText) {
    RSA *rsa_prik;
    unsigned int len;
    char hexPrik[] = {
            0x30, 0x82, 0x04, 0xA4, 0x02, 0x10, 0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xA4, 0xC4, 0xFE, 0x2C,
            0xCD, 0x1B, 0x19, 0x4E, 0x94, 0x6A, 0x60, 0x6D, 0x26, 0x63, 0x4C, 0x7E, 0x73, 0xEA, 0x26, 0xB3,
            0xED, 0x5F, 0x8A, 0x39, 0x02, 0x1B, 0xD5, 0xB0, 0x99, 0xF0, 0x72, 0xBE, 0x38, 0x47, 0x9B, 0x1D,
            0xAD, 0xA1, 0xDF, 0x5F, 0xF6, 0x47, 0x9E, 0x01, 0x3A, 0x9F, 0x37, 0x86, 0x7F, 0xDE, 0x1A, 0x36,
            0x18, 0x05, 0x4F, 0x2C, 0x17, 0x3A, 0x45, 0x41, 0x84, 0xA9, 0x05, 0x88, 0x11, 0x0D, 0xB1, 0x57,
            0xC3, 0x58, 0x35, 0x7C, 0x81, 0x64, 0x15, 0x69, 0xCC, 0x85, 0xAD, 0xE1, 0x4E, 0xA6, 0x63, 0x25,
            0xB9, 0x9C, 0xE2, 0x6D, 0x03, 0xEF, 0xE6, 0x75, 0x0C, 0x19, 0xF3, 0xEC, 0x6D, 0x74, 0x1E, 0xB5,
            0x02, 0x81, 0xC3, 0x60, 0x63, 0xB5, 0x25, 0xC3, 0x77, 0xBB, 0xEB, 0x8E, 0x4F, 0x83, 0x54, 0x8C,
            0x43, 0xB5, 0x72, 0xBA, 0xF6, 0x3A, 0x5E, 0x0C, 0x59, 0x3A, 0xFB, 0x06, 0x31, 0xB6, 0x80, 0x90,
            0xA5, 0x29, 0xEE, 0xBE, 0xBD, 0xFC, 0x3A, 0xEE, 0xD6, 0x72, 0x65, 0x8B, 0x99, 0x9E, 0xBE, 0xB4,
            0x48, 0xF8, 0x75, 0xEE, 0x72, 0x27, 0xA3, 0x87, 0x8A, 0x6D, 0x72, 0xA8, 0x6E, 0xA3, 0x21, 0x14,
            0x63, 0xDF, 0x15, 0xEC, 0x5F, 0xAF, 0x77, 0xF4, 0xF8, 0xC2, 0x0C, 0xD7, 0xC1, 0x7F, 0x22, 0x0B,
            0xA7, 0x52, 0xB5, 0xE1, 0xE3, 0xBB, 0xA8, 0x35, 0x1B, 0xD9, 0x8A, 0x2C, 0x79, 0xED, 0x4E, 0x0E,
            0x6B, 0xEA, 0x11, 0x55, 0x7E, 0xBB, 0xAF, 0x2A, 0x32, 0xB1, 0x33, 0x3D, 0x75, 0x3B, 0xC0, 0xCF,
            0x68, 0x6C, 0x62, 0x64, 0xD7, 0x2F, 0x74, 0xFA, 0x2D, 0x72, 0x99, 0xA5, 0xCC, 0xC4, 0x48, 0x62,
            0x28, 0x7B, 0x6E, 0x04, 0x00, 0xC2, 0xCF, 0x2A, 0x56, 0xDC, 0x79, 0x00, 0x92, 0xE5, 0x60, 0x23,
            0xBD, 0xC7, 0x7B, 0xDB, 0x6B, 0x05, 0xE3, 0x80, 0xCE, 0xAC, 0x14, 0x11, 0x02, 0x03, 0x01, 0x00,
            0x01, 0x02, 0x82, 0x24, 0x00, 0x07, 0x2E, 0xB4, 0x49, 0xB9, 0xC6, 0x40, 0x5F, 0xBD, 0xF9, 0xBC,
            0x65, 0x9B, 0x7B, 0x24, 0x93, 0x49, 0xA6, 0xDB, 0x01, 0x65, 0x0D, 0x3E, 0x82, 0xF5, 0x85, 0xE5,
            0xB4, 0x6A, 0x5F, 0xD7, 0x4B, 0x35, 0x32, 0xA2, 0x8C, 0x53, 0x7D, 0x04, 0x6B, 0x80, 0x5C, 0x49,
            0x58, 0x83, 0x5C, 0x79, 0xB4, 0xF6, 0xAD, 0x25, 0x1B, 0x03, 0xE2, 0x0D, 0xC7, 0x15, 0x86, 0xCB,
            0x6B, 0xB4, 0xDA, 0xFC, 0x77, 0x7B, 0x8F, 0x6C, 0x0B, 0xCF, 0x56, 0x5A, 0x8A, 0x03, 0x1E, 0x35,
            0x39, 0x7F, 0x35, 0xDE, 0x01, 0x52, 0xC1, 0x0D, 0xED, 0xD1, 0x90, 0xB0, 0xA7, 0x4B, 0x8F, 0x21,
            0x5A, 0x37, 0x42, 0x91, 0xB4, 0x14, 0x38, 0x37, 0xF8, 0xCB, 0x9C, 0x35, 0x32, 0x0C, 0xDF, 0x0D,
            0x63, 0x5B, 0xB1, 0x6A, 0x59, 0xD6, 0xA1, 0x9A, 0x8E, 0x04, 0x1F, 0x59, 0xE1, 0x8A, 0x58, 0x97,
            0xCA, 0x84, 0xED, 0x04, 0x7F, 0x60, 0x79, 0xED, 0xC7, 0xC3, 0xDB, 0x35, 0x8E, 0x5E, 0xE0, 0xBE,
            0xAD, 0x08, 0x42, 0x40, 0xE2, 0xDF, 0x2C, 0x9D, 0x02, 0x23, 0x12, 0x68, 0x15, 0x3D, 0x8A, 0x67,
            0x19, 0xD0, 0xA5, 0x35, 0x2C, 0x22, 0xDD, 0xBF, 0xD3, 0x55, 0x09, 0x46, 0x1A, 0x1D, 0x46, 0x9E,
            0xCA, 0x21, 0x89, 0x9D, 0xCA, 0xFB, 0x4C, 0xC4, 0x9A, 0x0D, 0xE4, 0x88, 0xF0, 0x61, 0x13, 0xC1,
            0x4A, 0x7A, 0xD6, 0xC3, 0xDB, 0xAD, 0xFA, 0xA0, 0xB7, 0x5B, 0x1F, 0x88, 0x98, 0x6F, 0xD4, 0x7D,
            0x63, 0x8F, 0x08, 0x4B, 0x4E, 0xF3, 0xCE, 0x62, 0xA6, 0xC2, 0x37, 0x40, 0x5B, 0x1D, 0x22, 0xFA,
            0xA5, 0xC5, 0x75, 0xD4, 0xB5, 0x20, 0x68, 0x41, 0xE9, 0xD8, 0x24, 0x19, 0xCA, 0x58, 0x9C, 0x45,
            0xBA, 0x30, 0x6C, 0x4A, 0x83, 0x8C, 0x9C, 0x24, 0xA8, 0x42, 0x93, 0x08, 0x21, 0x6E, 0x77, 0xBD,
            0xC2, 0xC8, 0x48, 0x2E, 0xB9, 0x02, 0x5F, 0x81, 0x00, 0xD7, 0x36, 0x2E, 0x42, 0xED, 0x07, 0x6B,
            0xB3, 0x80, 0x56, 0x79, 0xBB, 0xAF, 0x3D, 0x51, 0xA7, 0x52, 0xA5, 0xF0, 0x0B, 0x81, 0x0D, 0x77,
            0x8E, 0x32, 0xD3, 0x55, 0xBA, 0xB3, 0x2A, 0x04, 0x8F, 0x73, 0xEA, 0xE8, 0x73, 0xE6, 0xBA, 0xC3,
            0x6E, 0x79, 0x28, 0x5B, 0x2F, 0xF5, 0xD7, 0x1C, 0x8E, 0x03, 0x7A, 0x05, 0x5E, 0x40, 0x48, 0xC0,
            0xA7, 0x93, 0x10, 0x9A, 0xA1, 0xC1, 0x05, 0xF6, 0x02, 0x03, 0x08, 0x54, 0xD4, 0x0C, 0xBC, 0x62,
            0x3C, 0x41, 0x97, 0x68, 0xBA, 0x54, 0x68, 0x84, 0xB5, 0x97, 0xBD, 0xC2, 0x7E, 0x3A, 0x73, 0xD2,
            0x3C, 0x57, 0x4F, 0x41, 0x7F, 0xF1, 0x80, 0x6D, 0x1F, 0xFF, 0x1A, 0x7F, 0xCF, 0x11, 0x45, 0xB9,
            0x36, 0x0A, 0xE8, 0x61, 0x89, 0xC6, 0xFB, 0xC2, 0x4F, 0xC3, 0xD3, 0x94, 0x03, 0x49, 0x98, 0xF2,
            0x86, 0xB7, 0xFD, 0x90, 0x26, 0x9A, 0x78, 0x2B, 0x87, 0x02, 0x81, 0xDD, 0x00, 0xC3, 0xFF, 0x4B,
            0x24, 0xD5, 0x74, 0xB6, 0x1B, 0x4A, 0x02, 0x81, 0x9C, 0x3A, 0x2F, 0xC9, 0x73, 0x8B, 0x88, 0x3C,
            0x70, 0x4E, 0x23, 0xA9, 0xCE, 0x91, 0xD0, 0x19, 0x70, 0xD7, 0x97, 0x2B, 0x34, 0x4E, 0x14, 0xDD,
            0xA5, 0x83, 0x66, 0x5F, 0x7A, 0x66, 0x02, 0x2B, 0xFE, 0x94, 0x27, 0xF5, 0xF5, 0x66, 0x1F, 0xCD,
            0xB1, 0x3E, 0x66, 0xCC, 0xBD, 0x4D, 0x5D, 0x2B, 0xA4, 0xA5, 0xBA, 0x5F, 0x6C, 0xC5, 0x62, 0x21,
            0x9B, 0xBD, 0x3D, 0x11, 0xC4, 0x3F, 0x2B, 0x18, 0x64, 0xA9, 0x17, 0x5B, 0xF5, 0xAA, 0x4A, 0x85,
            0x54, 0x37, 0xDF, 0x49, 0xDF, 0x86, 0x44, 0x8E, 0x6D, 0xD0, 0xF9, 0x64, 0x3E, 0x3B, 0xB3, 0xCE,
            0xA7, 0x23, 0xAA, 0xA2, 0x55, 0xDA, 0xD9, 0x98, 0x34, 0xA6, 0xC3, 0xB0, 0xC3, 0x50, 0xD5, 0xDB,
            0xF1, 0x4B, 0x53, 0xD3, 0x1C, 0x36, 0x63, 0x4C, 0xCE, 0xF5, 0xE9, 0x78, 0xA7, 0x02, 0x81, 0x81,
            0x00, 0xD6, 0x14, 0x4A, 0x31, 0x70, 0xE7, 0x99, 0x07, 0x4E, 0x4E, 0xB7, 0x39, 0xB4, 0xD0, 0x50,
            0x27, 0xF4, 0x3E, 0xEC, 0xD1, 0xE2, 0xF3, 0x1F, 0x81, 0xB1, 0x3D, 0x58, 0x82, 0x27, 0xC7, 0xA3,
            0x9A, 0xEF, 0x8C, 0x35, 0x3F, 0x8D, 0xBD, 0x62, 0xBA, 0x79, 0xFB, 0x12, 0xF9, 0xD3, 0x21, 0xB0,
            0x5D, 0xF4, 0x47, 0xEE, 0x1F, 0xA4, 0x20, 0xBA, 0x61, 0xF7, 0x81, 0x74, 0xAC, 0x90, 0x32, 0xBE,
            0x94, 0xB1, 0xBF, 0xBF, 0xA1, 0xD0, 0x29, 0x1F, 0x65, 0xCB, 0xB0, 0x79, 0x95, 0x82, 0x71, 0xC7,
            0xF7, 0x20, 0x0A, 0xBB, 0x75, 0xF0, 0xA6, 0x55, 0xF3, 0x48, 0x46, 0xA6, 0xB9, 0x46, 0xDB, 0x28,
            0xFB, 0x73, 0x20, 0x41, 0x13, 0x1C, 0xF3, 0x71, 0x91, 0xB8, 0xB8, 0x00, 0x8E, 0x09, 0x32, 0xCE,
            0xCF, 0xD9, 0xD4, 0x02, 0xDF, 0xCF, 0x45, 0x3D, 0xB2, 0x95, 0x43, 0xE9, 0x18, 0xFC, 0x92, 0x83,
            0xF1, 0x02, 0x81, 0x80, 0x7B, 0x4E, 0x8E, 0xCA, 0x95, 0x7D, 0xE5, 0xDF, 0xEF, 0x4E, 0x34, 0x3D,
            0x7B, 0xCD, 0xFA, 0xB0, 0x71, 0xE1, 0x4C, 0x11, 0xDF, 0x9C, 0x22, 0x45, 0xBA, 0x89, 0x1D, 0x7F,
            0x7A, 0xB3, 0x39, 0x54, 0x33, 0x88, 0x7E, 0xC6, 0x95, 0x8F, 0x7F, 0x7C, 0x2C, 0x01, 0x83, 0xCA,
            0x2B, 0x4D, 0xA4, 0xCC, 0x19, 0xE1, 0x4B, 0x57, 0xA3, 0x49, 0x6A, 0x51, 0x8A, 0xDE, 0x07, 0x8D,
            0x13, 0x52, 0xAB, 0xF1, 0x2A, 0x91, 0x1D, 0x11, 0xB9, 0xD1, 0xB1, 0xEE, 0xC4, 0xE2, 0x36, 0x7F,
            0x1C, 0xD6, 0x7C, 0x5D, 0x36, 0xAF, 0x1E, 0xD7, 0xA8, 0x8A, 0x0B, 0x00, 0xDC, 0x89, 0x05, 0xE4,
            0x0A, 0xF8, 0x0B, 0xAF, 0xF7, 0x56, 0x9C, 0xFE, 0x9C, 0x3A, 0xCA, 0xDC, 0x41, 0x28, 0x75, 0x50,
            0x92, 0xA6, 0x44, 0x8A, 0xEC, 0x4C, 0x0E, 0x8E, 0x53, 0xF4, 0x4D, 0x00, 0xDB, 0xAC, 0xBD, 0x31,
            0xEB, 0x96, 0x66, 0xBB, 0x02, 0x81, 0x81, 0x61, 0xFB, 0x55, 0xB5, 0x42, 0xA5, 0x4F, 0x8C, 0x84,
            0x66, 0x66, 0x5B, 0x09, 0x20, 0x4E, 0x31, 0x81, 0x62, 0x0C, 0x3B, 0x8C, 0x0D, 0x2D, 0x4D, 0xCC,
            0x36, 0xC7, 0x5B, 0x9A, 0xD5, 0xE6, 0x50, 0x91, 0x6F, 0x53, 0x53, 0xBB, 0xF5, 0xCC, 0xDB, 0x6F,
            0x64, 0x25, 0xD9, 0xA4, 0xBF, 0x11, 0x56, 0xF5, 0xFB, 0x24, 0x45, 0x03, 0x5B, 0x4D, 0x0B, 0xBA,
            0x10, 0x27, 0xCB, 0xB8, 0xCD, 0xBA, 0x73, 0xF9, 0x96, 0x2F, 0x61, 0x24, 0xA0, 0x56, 0xC7, 0x7A,
            0xA8, 0x5D, 0x06, 0x06, 0xE3, 0x4A, 0xF4, 0x56, 0xDC, 0xA6, 0x3D, 0x4C, 0x14, 0x97, 0xA8, 0xB2,
            0x66, 0x78, 0x6C, 0x9E, 0x2D, 0xD4, 0x47, 0x48, 0x1A, 0x90, 0x2C, 0x8C, 0x3F, 0x13, 0x54, 0x95,
            0x52, 0x01, 0x6F, 0x6E, 0xDE, 0x39, 0x1C, 0x71, 0x11, 0xF2, 0xF7, 0xB4, 0xCF, 0xC4, 0x20, 0x96,
            0x5D, 0xB5, 0x85, 0xC4, 0x46, 0xE0, 0x2E, 0x80,};
    LOGI("rsaSign start\n");
    char *sig;
    BIO *in = NULL;
    int i = 0;
    int j;
    char *buf;
    //liaoxiaomin@wind-mobi.com add begin 20180116
    char *chPrik;
    char *swPrik;
    const char *pem_bstr = "-----BEGIN RSA PRIVATE KEY-----\n";
    const char *pem_estr = "-----END RSA PRIVATE KEY-----\n";
    int size_swPrik;
    //liaoxiaomin@wind-mobi.com add end 20180116
    int len_b, len_e;
    int size_hexPrik = sizeof(hexPrik);
    OpenSSL_add_all_algorithms();
    LOGI("rsaSign jniText=%s\n",testText.c_str());
    while (size_hexPrik - i >= 64) {
        buf = hexPrik + i;
        i += 64;
        myswap(buf, 55, 5);
        myswap(buf, 22, 45);
        myswap(buf, 49, 19);
        myswap(buf, 39, 27);
    }
    //base64->swPrik
    //liaoxiaomin@wind-mobi.com add begin
    swPrik = (char *) malloc((size_hexPrik / 3 + 1) * 4);
//    LOGI("rsaSign size_hexPrik: %d   size_swPrik=%d\n", size_hexPrik, ((size_hexPrik / 3 + 1) * 4));
    myencode(myprik, 1192, swPrik, (size_hexPrik / 3 + 1) * 4);
    LOGI("rsaSign   swPrik=%s\n", swPrik);
    size_swPrik = (size_hexPrik / 3 + 1) * 4;
    //liaoxiaomin@wind-mobi.com add end
    len_b = strlen(pem_bstr);
    len_e = strlen(pem_estr);
    chPrik = (char *) malloc(len_b + size_swPrik + i / 64 + 1 + len_e + 1);
    memcpy(chPrik, pem_bstr, len_b);
    i = 0;
    j = len_b;

    while (size_swPrik - i >= 64) {
        memcpy(chPrik + j, swPrik + i, 64);
        *(chPrik + j + 64) = '\n';
        i += 64;
        j += 65;
    }
    if (size_swPrik - i > 0) {
        memcpy(chPrik + j, swPrik + i, size_swPrik - i);
        *(chPrik + j + size_swPrik - i) = '\n';
    }
    memcpy(chPrik +j + size_swPrik - i + 1, pem_estr, len_e);
    *(chPrik +j + size_swPrik - i + 1 + len_e) = 0;
//    LOGI("lxm priv pem: chPrik %s", chPrik);
    in = BIO_new_mem_buf(chPrik, -1);
    if (in == NULL) {
        LOGI("rsa_sign() BIO_new_mem_buf fail!\n");
        return NULL;
    }

    rsa_prik = PEM_read_bio_RSAPrivateKey(in, NULL, NULL, NULL);
    if (in != NULL){
        BIO_free(in);
    }
    if (rsa_prik == NULL) {
        LOGI("PEM_read_bio_RSAPrivateKey");
        return NULL;
    }
//    LOGI("RSA_sign  11111 rsasize=%d\n",RSA_size(rsa_prik));
    if (NULL == (sig = (char*)malloc(RSA_size(rsa_prik)))){
        LOGI("malloc sig fail!\n");
        RSA_free(rsa_prik);
    }else{
        //liaoxiaomin@wind-mobi.com add begin 20180116
        rsa_sign(rsa_prik, testText.c_str(),sig, &len);
        //LOGI("RSA_sign success  sig=%s!\n",sig);

        int ss=256;
//        LOGI("RSA_sign  22222 ss=%d\n",ss);
        i = 0;
        while (ss - i >= 64) {
            j = 0;
            while(j < 64){
//                LOGI("%02X", sig[i+j]);
                j++;
            }
//            LOGI("\n");
            i += 64;
        }
        if(ss - i > 0){
            j = 0;
            while(j < ss - i){
//                LOGI("%02X", sig[i+j]);
                j++;
            }
        }
        char *bsig = (char*)malloc(345);
        bsig[344] = 0;
        myencode((const unsigned char *) sig, 256, bsig, 344);
        //free((void *) sig);
        return bsig;
        //liaoxiaomin@wind-mobi.com add end 20180116
    }
    return NULL;

    }
